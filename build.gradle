plugins {
	id 'fabric-loom' version '1.0-SNAPSHOT'
	id 'maven-publish'
	id 'java-library'
	id 'com.github.johnrengelman.shadow' version '7.0.0'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'com.modrinth.minotaur' version '2.5.0'
	id "com.github.breadmoirai.github-release" version "2.2.12"
	id 'de.siphalor.modpubup' version '0.1.0'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version + '+mc' + minecraft_version
group = project.maven_group

repositories {
	mavenLocal()
	mavenCentral()
	maven { url "https://maven.terraformersmc.com/releases" }
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.nucleoid.xyz" }
	maven { url "https://maven.siphalor.de" }
	maven { url "https://maven.ryanliptak.com/" }
	maven { url 'https://jitpack.io' }
}

loom {
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	
	// Fabric API
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
	// exp4j
	shadow(implementation('net.objecthunter:exp4j:0.4.8'))

	// Tweed
	include(modApi(platform("de.siphalor.tweed4:tweed4-bom-$minecraft_major_version:$tweed_version")))
	def tweedDeps = [
	        'base', 'annotated',
			'data', 'data-hjson',
			'tailor-screen', 'tailor-coat',
			'tailor-lang-json-descriptions'
	]
	tweedDeps.each {
		include(modApi("de.siphalor.tweed4:tweed4-$it-$minecraft_major_version"))
	}

	include(modApi("de.siphalor:coat-$minecraft_major_version:$coat_version"))

	// Capsaicin
	include(modApi("de.siphalor:capsaicin-$minecraft_major_version:$capsaicin_version"))

	// Change this to modImplementation for testing server-side-only mode
	modImplementation "eu.pb4:polymer-core:$polymer_version"
	modImplementation "eu.pb4:polymer-resource-pack:$polymer_version"

	// AppleSkin
	modCompileOnly "squeek.appleskin:appleskin-fabric:$appleskin_version:api"
	modLocalRuntime "squeek.appleskin:appleskin-fabric:$appleskin_version"

	// REI
	modLocalRuntime(modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:$rei_version"))

	// LazyDFU
	modLocalRuntime("com.github.astei:lazydfu:master-SNAPSHOT")

	// Testing
	testImplementation "org.junit.jupiter:junit-jupiter:5+"
}

// Workaround for https://github.com/gradle/gradle/issues/10195
configurations.include.transitive = true
configurations.include.dependencies.each {
	if (!it.name.contains("bom")) {
		it.transitive = false
	}
}

test {
	useJUnitPlatform()
}

processResources {
	inputs.property "version", version

	afterEvaluate {
		from(sourceSets.main.resources.srcDirs) {
			include "fabric.mod.json"
			expand "version": version
			duplicatesStrategy DuplicatesStrategy.INCLUDE
		}
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier.set("sources")
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
	archiveClassifier.set("dev")
}

shadowJar {
	configurations = [project.configurations.shadow]
	archiveClassifier.set("dev")
	relocate "net.objecthunter", "de.siphalor.spiceoffabric.shadow.net.objecthunter"
}

remapJar {
	dependsOn(shadowJar)
	inputFile = tasks.shadowJar.archiveFile
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			it.artifactId("${project.archives_base_name}-${project.minecraft_major_version}")

			from components.java
			java.withSourcesJar()
		}
	}
	repositories {
		if (project.hasProperty("siphalorMavenUser")) {
			maven {
				name = "Siphalor"
				url = "https://maven.siphalor.de/upload.php"
				credentials {
					username = siphalorMavenUser
					password = siphalorMavenPassword
				}
			}
		}
	}
}

// Mod sites

static def getChangelog() {
	return 'git log -1 --format=format:##%x20%s%n%n%b%nRelease%x20by%x20%an --grep Version'.execute().text.trim()
}

tasks.register('uploadToModSites') {
	dependsOn build
	group = "upload"
}

if (project.hasProperty("curseforgeToken")) {
	curseforge {
		apiKey project.curseforgeToken
		def changes = project.getChangelog()
		project {
			id = "318416"
			releaseType = project.mod_release
			changelogType = "markdown"
			changelog = changes
			addGameVersion('Fabric')
			for (version in ((String) project.mod_mc_versions).split(";")) {
				addGameVersion(version)
			}
			relations {
				requiredDependency "fabric-api"
				optionalDependency "appleskin"
				optionalDependency "polymer"
			}
			mainArtifact(remapJar) {
				displayName = "[${project.mod_mc_version_specifier}] ${project.mod_version}"
			}
		}
	}
	uploadToModSites.finalizedBy(tasks.curseforge)
}

modrinth {
	if (project.hasProperty("modrinthToken")) {
		token = project.modrinthToken
		uploadToModSites.finalizedBy(tasks.modrinth, tasks.modrinthSyncBody)
	}

	projectId = "roxihOCb"
	versionName = "[$project.mod_mc_version_specifier] $project.mod_version"
	versionType = project.mod_release
	changelog = project.getChangelog()
	uploadFile = remapJar
	gameVersions = project.mod_mc_versions.split(";") as List<String>
	loaders = ["fabric"]
	syncBodyFrom = file("README.md").text

	dependencies {
		required.project("fabric-api")
		optional.project("appleskin")
		optional.project("polymer")
	}
}
tasks.modrinth.group = "upload"
tasks.modrinthSyncBody.group = "upload"

if (project.hasProperty("githubToken")) {
	githubRelease {
		token githubToken
		targetCommitish = minecraft_major_version
		releaseName = "Version $mod_version for $project.mod_mc_version_specifier"
		body = project.getChangelog()
		releaseAssets remapJar.getArchiveFile()
		prerelease = mod_release != "release"
		overwrite = true
	}
	uploadToModSites.finalizedBy(tasks.githubRelease)
}
